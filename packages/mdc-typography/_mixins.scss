//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "./variables";

@mixin mdc-typography-base {
  font-family: $mdc-typography-font-family;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

@function get-global-variable($style) {
  @if $style == "headline1" {
    @return $mdc-typography-styles-headline1;
  } @else if $style == "headline2" {
    @return $mdc-typography-styles-headline2;
  } @else if $style == "headline3" {
    @return $mdc-typography-styles-headline3;
  } @else if $style == "headline4" {
    @return $mdc-typography-styles-headline4;
  } @else if $style == "headline5" {
    @return $mdc-typography-styles-headline5;
  } @else if $style == "headline6" {
    @return $mdc-typography-styles-headline6;
  } @else if $style == "subtitle1" {
    @return $mdc-typography-styles-subtitle1;
  } @else if $style == "subtitle2" {
    @return $mdc-typography-styles-subtitle2;
  } @else if $style == "body1" {
    @return $mdc-typography-styles-body1;
  } @else if $style == "body2" {
    @return $mdc-typography-styles-body2;
  } @else if $style == "caption" {
    @return $mdc-typography-styles-caption;
  } @else if $style == "button" {
    @return $mdc-typography-styles-button;
  } @else if $style == "overline" {
    @return $mdc-typography-styles-overline;
  }
}

@mixin mdc-typography($style) {
  $style-props: map-get($mdc-typography-styles, $style);

  @if not map-has-key($mdc-typography-styles, $style) {
    @error "Invalid style specified! #{$style} doesn't exist. Choose one of #{map-keys($mdc-typography-styles)}";
  }

  @include mdc-typography-base;

  @if global_variable_exists(mdc-typography-styles-#{$style}) {
    $style-props: map-merge($style-props, get-global-variable(#{$style}));
    $mdc-typography-styles: map-merge($mdc-typography-styles, (#{$style}: $style-props));
  }

  @each $key, $value in $style-props {
    #{$key}: $value;
  }
}

// Element must be `display: block` or `display: inline-block` for this to work.
@mixin mdc-typography-overflow-ellipsis {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}
